# -*- coding: utf-8 -*-
"""Predicitve_Analytic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qvm8KgrvKX483C7MPHPECwRJ_VjfgnNv

# Import Library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_auc_score

from sklearn.ensemble import RandomForestClassifier

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

"""# Load Dataset"""

df = pd.read_csv('/content/diabetes.csv')
df.head()

"""# Data Understanding"""

# Cek struktur data
df.info()

# Statistik deskriptif
df.describe()

# Cek missing value
df.isnull().sum()

"""Tidak ditemukan missing value dalam dataset ini"""

# Cek data duplicate
df.duplicated().sum()

"""Tidak ditemukan data duplicate dalam dataset ini

# Exploratory Data Analysis (EDA)
"""

# Distribusi target
sns.countplot(x='Outcome', data=df)
plt.title("Distribusi Pasien Diabetes")

"""Jumlah pasien yang tidak menderita diabetes (Outcome = 0) jauh lebih banyak, sekitar 500 orang, dibandingkan pasien yang menderita diabetes (Outcome = 1) yang berjumlah sekitar 260 orang."""

# Visualisasi distribusi tiap fitur
df.hist(figsize=(12, 10))
plt.suptitle('Distribusi Fitur-fitur dalam Dataset')
plt.show()

# Cek korelasi antar fitur
correlation_matrix = df.corr()
plt.figure(figsize=(10, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Heatmap Korelasi Antar Fitur')
plt.show()

# Cek distribusi dari beberapa fitur terkait outcome
sns.pairplot(df, hue='Outcome', vars=['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'Age'])
plt.suptitle('Pairplot Fitur terhadap Outcome')
plt.show()

# Cek hubungan antara dua fitur (BMI dan Glukosa)
sns.scatterplot(x='BMI', y='Glucose', hue='Outcome', data=df)
plt.title('Hubungan BMI vs Glukosa')
plt.show()

"""# Data Preparation"""

# Pisahkan fitur dan label
X = df.drop('Outcome', axis=1)
y = df['Outcome']

# Normalisasi fitur
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split data: train, val, test
X_train, X_temp, y_train, y_temp = train_test_split(X_scaled, y, test_size=0.3, random_state=42, stratify=y)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42, stratify=y_temp)

print(f"Train: {X_train.shape}, Val: {X_val.shape}, Test: {X_test.shape}")

"""# Modeling

### Neural Network
"""

model = Sequential([
    Dense(64, input_dim=X_train.shape[1], activation='relu'),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(X_train, y_train, epochs=100, validation_data=(X_val, y_val), verbose=0)

# Plot Akurasi
plt.figure(figsize=(10, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.title("Model Accuracy")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend()

# Plot Loss
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.title("Model Loss")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()

plt.tight_layout()
plt.show()

"""### Random Forest"""

# Inisialisasi model
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)

# Latih model
rf_model.fit(X_train, y_train)

# Prediksi pada data test
rf_pred = rf_model.predict(X_test)
rf_proba = rf_model.predict_proba(X_test)[:, 1]

"""# Evaluasi Model

### Neural Network
"""

# Evaluasi di data test
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Akurasi Test: {accuracy:.2f}")

# Prediksi MLP
y_pred_proba = model.predict(X_test)
y_pred_classes = (y_pred_proba > 0.5).astype("int32")

# AUC dengan probabilitas
mlp_auc = roc_auc_score(y_test, y_pred_proba)

# Metrics MLP
print(confusion_matrix(y_test, y_pred_classes))
print("\n ------------------------------------------------------------")
print(classification_report(y_test, y_pred_classes))
print("ROC AUC MLP:", mlp_auc)

"""### Random Forest"""

print("=== Evaluasi Model Random Forest ===")
print("Akurasi:", accuracy_score(y_test, rf_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, rf_pred))
print("Classification Report:\n", classification_report(y_test, rf_pred))
print("ROC AUC:", roc_auc_score(y_test, rf_proba))

# === Perbandingan Hasil ===

mlp_accuracy = accuracy_score(y_test, y_pred_classes)
mlp_auc = roc_auc_score(y_test, y_pred_proba)

rf_accuracy = accuracy_score(y_test, rf_pred)
rf_auc = roc_auc_score(y_test, rf_proba)

print("=== Perbandingan Model ===")
print(f"MLP (Neural Network) - Akurasi: {mlp_accuracy:.2f}, AUC: {mlp_auc:.2f}")
print(f"Random Forest         - Akurasi: {rf_accuracy:.2f}, AUC: {rf_auc:.2f}")